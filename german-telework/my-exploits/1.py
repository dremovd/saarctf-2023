from pwn import *
r = remote('144.76.26.107', 30000, ssl=True)

"""
+ Log in as any user.
+ Retrieve all announcements that start with “Note to self:” and their author information.
For each announcement, decrypt the ciphertext as follows:
+ Use the Gateway’s “employee register” functionality to retrieve the author’s employee ID.
Decode the base64-encoded ciphertext to raw bytes.
Iterate over the ciphertext in 16-byte blocks. Split each block in two halves (i.e., two 8-byte blocks) and swap them.
Encrypt a message to the author’s employee ID. Encode the swapped ciphertext as base64 and use it as plaintext message.
Iterate over the encryption result in 16-byte blocks. Split each block in two halves and swap them to get the flag.
"""

def login(first_name=b'trager', last_name=b'trager', password=b'trager'):
    r.recv()
    r.sendline(b'Login')
    r.sendline(first_name)
    r.sendline(last_name)
    r.sendline(password)
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()

def retrieve_announcements():
    r.recvline()
    r.recvline()
    r.recvline()
    r.sendline(b"Read or post important announcements")
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.sendline(b"Get number of active announcements")
    n_announcements = int(r.recvline().strip().rsplit()[-1])

    announcements = []
    for i in range(n_announcements):
        r.recvline()
        r.recvline()
        r.recvline()
        r.sendline(b"Read or post important announcements")
        r.sendline(b"Get announcement by number")
        r.sendline(str(i).encode())
        r.recvline()
        r.recvline()
        r.recvline()
        r.recvline()
        r.recvline()
        r.recvline()
        r.recvline()
        r.recvline()
        text = r.recvline().decode()
        user, text = text.split('THIS IS')[-1].split('I REPEAT')[0].strip().split('SPEAKING TO EVERYONE.')
        user = user.strip()
        text = text.strip()
        announcements.append((user, text))
    return announcements

def get_employee_register():
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.sendline(b"View the employee register")
    r.recvline()
    employees = {}
    while True:
        employee = r.recvline().strip().decode()
        if 'End of employee list.' not in employee:
            employee_id, _, first_name, last_name = employee.split('|')
            first_name = first_name.strip()
            last_name = last_name.strip()
            employee_id = employee_id.strip()
            employees[f'{first_name} {last_name}'] = employee_id
        else:
            break
    return employees
    
if __name__ == '__main__':
    login()
    announcements = retrieve_announcements()
    important_announcements = [announcement for announcement in announcements if 'Note to self:' in announcement[1]]
    employee_register = get_employee_register()
    for announcement in important_announcements:
        user, text = announcement
        employee_id = employee_register[user]
        print(f'User: {user}, Employee ID: {employee_id}')

    # r.interactive()
